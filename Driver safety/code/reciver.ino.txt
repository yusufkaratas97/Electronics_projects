#include <SPI.h>               
#include <mcp2515.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,16,2);

int val=0;
int recived_val=0;
bool stat=0;
int timer=0;

struct can_frame canMsg; 
MCP2515 mcp2515(53);


void setup() {
  delay(1000);
 pinMode(30,OUTPUT);
 pinMode(31,OUTPUT);
 pinMode(32,OUTPUT);
  pinMode(33,INPUT);
  Serial.begin(9600);
  SPI.begin();
    mcp2515.reset();                          
  mcp2515.setBitrate(CAN_500KBPS,MCP_8MHZ); //can hızı 500 kbps 8 mhz 
  mcp2515.setNormalMode();
    TCCR0A=(1<<WGM01);    //Set the CTC mode   
  OCR0A=0xF9; //Value for ORC0A for 1ms 
  
  TIMSK0|=(1<<OCIE0A);   //Set the interrupt request
  sei(); //Enable interrupt
  
  TCCR0B|=(1<<CS01);    //Set the prescale 1/64 clock
  TCCR0B|=(1<<CS00);

lcd.init();
lcd.backlight();

}

void loop() {
  if (mcp2515.readMessage(&canMsg) == MCP2515::ERROR_OK) // To receive data (Poll Read)
  {
     recived_val = canMsg.data[0]; 
     Serial.print(recived_val);        
       if(digitalRead(33))
  {
   val=!val;  
   while(digitalRead(33)){}
        
   } 
      if(val&&recived_val)
   {
      lcd.clear();
     lcd.print("safe :)");
     delay(100);
    digitalWrite(30,1);
     digitalWrite(31,0);
      digitalWrite(32,1);
      
    
     }
     else if(val==0&&recived_val)
     {
      lcd.clear();
      lcd.print("safe :)"); 
     digitalWrite(30,0); 
     digitalWrite(31,1);
     digitalWrite(32,0);
       val=0;
        
     }
     else
     {
      lcd.clear();
      lcd.print("danger !!!!");            
     digitalWrite(30,0); 
     if(timer>=1000){
      digitalWrite(31,stat);
    stat=!stat;
    timer=0;
  }
      
       digitalWrite(32,0);
       val=0;
        
     }
    }
                           
}
ISR(TIMER0_COMPA_vect){    //This is the interrupt request
  timer++;
}
